
## DESCRIPTION
## Operations Research / Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('steady state', 'eigenvalues' 'eigenvectors')
## Tagged by aableson

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Queens')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
        "PGbasicmacros.pl",
        "PGchoicemacros.pl",
        "PGanswermacros.pl",
        "PGgraphmacros.pl",
        "PGmatrixmacros.pl",
	"parserPopUp.pl",
	"MathObjects.pl",
        );
 
TEXT(beginproblem());    
Context("Numeric");
Context()->flags->set(tolerance=>.01);
$showPartialCorrectAnswers = 1;

# Defined the system
$N = 5;
$P = Matrix->new_from_array_ref([ [0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0], [0.0,0.0,0.0,0.0,0.0]]);
for ($r = 1; $r <= $N; $r++) {
  $p1 = random(0.1, 0.4, 0.1); 
  $p2 = random(0.1, 0.4, 0.1); 
  $p3 = 1 - $p1 - $p2;
  $P->assign($r, $r , $p1);
  $P->assign($r, ($r % $N) + 1, $p2);
  if ($r > 1) {
    $P->assign($r, ($r-2 % $N) + 1, $p3);
  } else {
    $P->assign(1, 5, $p3);
  }

}
$v = ($r-2 % $N) + 1;
$P2 = $P * $P;
$P3 = $P2 * $P;
$P4 = $P3 * $P;

# Select the start and end states
$start_state = random(2, $N-1);
$end_state = $start_state + list_random(1, -1);

$table_start = begintable($X_max + 2);
$table_row1  = row( "state i\j", @rounds);
$table_row2  = row( "$row ", @ans_bar);
$table_end   = endtable();

# Generate the solution
$Max_rounds = 3;
@rounds = ();
@ans_bar = ();
@row_vals = ();
for ($i = 1; $i <= $Max_rounds; $i++){
  push(@rounds, $i);
  push(@ans_bar, ans_rule(6));
}

# Define the answer table
$table_start = begintable($Max_rounds+1);
$table_row1  = row( "round \(n\)", @rounds);
$table_row2  = row( "\(f^n_{$start_state, $end_state}\) ", @ans_bar);
$table_end   = endtable();

# Create all powers of the P matrix
@P_n = ();
push(@P_n, $P);
for ($n = 2; $n <= $Max_rounds; $n++) {
  push(@P_n, $P_n[$n-2] * $P);
}
$myp = $P_n[1]->element($start_state, $end_state);
@f_n = ();
for ($n = 1; $n <= $Max_rounds; $n++) {
  $nind = $n-1;  # index, as opposed to round
  # probability of ending is round n is AT MOST p_ij
  $p_ij = $P_n[$nind]->element($start_state, $end_state);
  $new_f = $p_ij;
  # remove cases that lead to earlier arrival in j
  for ($r = 1; $r < $n; $r++) { # previous state counts
    $rest_ind = $n - $r - 1; # rounds after $r, but up to $n
    $p_jj = $P_n[$rest_ind]->element($end_state, $end_state);
    $new_f = $new_f - $f_n[$r-1] * $p_jj;
  }
  push (@f_n, Compute("$new_f"));
}


BEGIN_TEXT 

Consider the Markov chain implied by the one-step transition matrix P below.  
$BR
\{mbox( '\(P = \)', display_matrix($P))  \}  
$BR
Assume the states are numbered from 1 to $N.
$BR
If you $BBOLD begin in state $start_state$EBOLD, complete 
  the table of first passage times below for $BBOLD arriving
in state $end_state $EBOLD. 
  $BR i.e. compute the probability that in round \(n\)
you will $BBOLD first $EBOLD arrive in state $end_state.

$PAR
$table_start
$table_row1
$table_row2
$table_end
$BR
Note that this Markov chain does $BBOLD not $EBOLD have any absorbing states; the formula for first-passage times derived in class still applies.

$PAR
  Reference: $v
$BR
\{mbox( '\(P^2 = \)', display_matrix($P2))  \}  
$BR
\{mbox( '\(P^3 = \)', display_matrix($P3))  \}  
$BR
\{mbox( '\(P^4 = \)', display_matrix($P4))  \}  

END_TEXT

  foreach $f (@f_n) {
  ANS( $f->cmp());
}

BEGIN_SOLUTION


END_SOLUTION


ENDDOCUMENT();       # This should be the last executable line in the problem.
