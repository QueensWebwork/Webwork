#DESCRIPTION
# Infering derivative info from contour diagrams 
#ENDDESCRIPTION

#KEYWORDS('graphs', 'derivative', 'shape')
## tsuda tagged and PAID on 2-20-2004

## DBsubject('Calculus')
## DBchapter('Applications of Differentiation')
## DBsection('How Derivatives Affect the Shape of a Graph')
## Date('6/3/2002')
## Author('')
## Institution('')
## TitleText1('Calculus: Early Transcendentals')
## EditionText1('6')
## AuthorText1('Stewart')
## Section1('4.3')
## Problem1('5,6,8,29,30')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl",
"PGgraphmacros.pl",
"parserPopUp.pl",
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

# Initialize the graph
$exp = 2.5;
$N = 8;
$Nsq = $N**$exp;
$gr = init_graph(-$Nsq/20, -$Nsq/20, $Nsq*21/20, $Nsq*21/20);

$dir = random(0, 1); # 0 = NW lines, 1 = NE contours
$order = random(0, 1);  # 0 = incr, 1 = decr
$spacing = random(0, 1);  # 0 = incr, 1 = decr

@c1 = ("") x $n;
# Set the x or y coord spacing of contours
for ($i = 0; $i < $N; $i++) {
  if ($spacing == 0) {
     $c1[$i] = ($i+1)**$exp;
  } else {
    $c1[$N-$i-1] = $Nsq - (($i+1)**$exp);
  }
}

# Set the contour values
@contour_z = ("") x $n;
for ($i = 0; $i < $N; $i++) {
  if ($order == 0) {
     $contour_z[$i] = $i+1
  } else {
    $contour_z[$i] = ($N - $i);
  }
}

for ($i = 0; $i < $N; $i++) {
  if ($dir == 0) 	{
    $gr->moveTo($c1[$i], 0);
    $gr->lineTo(0, $c1[$i], 'black');
    $gr->lb( new Label($c1[$i], -0.5,$contour_z[$i],
      'black','center','middle'));
  } else {
    $gr->moveTo($c1[$i], 0);
    $gr->lineTo($Nsq, $Nsq-$c1[$i], 'black');
    $gr->lb( new Label($c1[$i], -0.5, $contour_z[$i],
      'black','center','middle'));
  }
}

# label for point
$i = 2;
if ($dir == 0) {
  $gr->lb( new Label($c1[$i]/2, $c1[$i]/2,'P',
      'black','bottom','right'));
  $gr->stamps( closed_circle($c1[$i]/2,$c1[$i]/2,'blue') ); 
} else {
  $x = ($Nsq + $c1[$i])/2;
  $y = (1/2)*($Nsq - $c1[$i]);
  $gr->lb( new Label($x,$y,'P',
      'black','bottom','right'));
  $gr->stamps( closed_circle($x, $y,'blue') ); 
}

# *** Answers ***
@options = ('Positive', 'Negative', 'Zero');
$f_ans = 'Positive';

# first derivative
if ($dir == 0) { # north-east is up or downhill
   if ($order == 0) { 
   $fx_ans = 'Positive'; $fy_ans = 'Positive';  } 
   else { 
   $fx_ans = 'Negative'; $fy_ans = 'Negative';  }

} else {  # south-east is up or downhill
   if ($order == 0) { 
   $fx_ans = 'Positive'; $fy_ans = 'Negative';  }
   else { 
   $fx_ans = 'Negative'; $fy_ans = 'Positive';  } 
}

# second derivative
if ($dir == 0) { # North-east incr or decr
   if ($order == 0 && $spacing == 0) {  # incr, more spaced out
     $fxx_ans = 'Negative';  $fyy_ans = 'Negative'; $fxy_ans = 'Negative'  } 
   elsif ($order == 1 && $spacing == 0) { # decr, more spaced out
     $fxx_ans = 'Positive';  $fyy_ans = 'Positive'; $fxy_ans = 'Positive'  } 
   elsif ($order == 0 && $spacing == 1) {  # incr, tighter spacing
     $fxx_ans = 'Positive';  $fyy_ans = 'Positive'; $fxy_ans = 'Positive'  } 
   else {   # decr, looser spacing
     $fxx_ans = 'Negative';  $fyy_ans = 'Negative'; $fxy_ans = 'Negative'  } 

} else { # south-east incr or decr
   if ($order == 0 && $spacing == 0) {  # incr, more spaced out x, less y
     $fxx_ans = 'Negative';  $fyy_ans = 'Negative'; $fxy_ans = 'Positive'  } 
   elsif ($order == 1 && $spacing == 0) { # decr, more spaced out
     $fxx_ans = 'Positive';  $fyy_ans = 'Positive'; $fxy_ans = 'Negative'  } 
   elsif ($order == 0 && $spacing == 1) {  # incr, tighter spacing
     $fxx_ans = 'Positive';  $fyy_ans = 'Positive'; $fxy_ans = 'Negative'  } 
   else {   # decr, looser spacing
     $fxx_ans = 'Negative';  $fyy_ans = 'Negative'; $fxy_ans = 'Positive'  } 
}

$popupf = PopUp([@options], $f_ans);
$popupfx = PopUp([@options], $fx_ans);
$popupfy = PopUp([@options], $fy_ans);
$popupfxx = PopUp([@options], $fxx_ans);
$popupfyy = PopUp([@options], $fyy_ans);
$popupfxy = PopUp([@options], $fxy_ans);


BEGIN_TEXT

Consider the contour diagram for \(z = f(x,y)\) shown below.

$PAR

\{ image(insertGraph($gr), width=>200, height=>200) \}

$BR
Note: you can click on the graph for a larger view.
$PAR

Determine whether the following values related to \(f(x,y)\) at the point \(P\) are
positive, negative, or zero.

$BR
\( \displaystyle f(x,y) \): \{ $popupf->menu() \}
$BR
\( \displaystyle f_x(x,y) \): \{ $popupfx->menu() \}
$BR
\( \displaystyle f_y(x,y) \): \{ $popupfy->menu() \}
$BR
\( \displaystyle f_{xx}(x,y) \): \{ $popupfxx->menu() \}
$BR
\( \displaystyle f_{yy}(x,y) \): \{ $popupfyy->menu() \}
$BR
\( \displaystyle f_{xy}(x,y) \): \{ $popupfxy->menu() \}

END_TEXT

ANS( $popupf->cmp() );
ANS( $popupfx->cmp() );
ANS( $popupfy->cmp() );
ANS( $popupfxx->cmp() );
ANS( $popupfyy->cmp() );
ANS( $popupfxy->cmp() );


ENDDOCUMENT();        # This should be the last executable line in the problem.
