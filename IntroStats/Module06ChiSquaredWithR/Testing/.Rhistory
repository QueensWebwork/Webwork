s_next = (s - x);
M3[s, x] = prob(x, 0.5, 2)*f4_star[s_next]
}
}
# Find AN optimal value for each s (might be duplicates)
f3_star[s] = max(M3[s,])
x3_star[s] = which.max(M3[s,])
}
f3 = max(f3_star)
x3 = max(x3_star)
f3_star
f3
M3
f4_star
# intial P-matrix
P = as.matrix(
rbind(
cbind(0.8, 0.2,   0,   0,   0),
cbind(  0, 0.5, 0.5,   0,   0),
cbind(  0,   0, 0.7, 0.3,   0),
cbind(  0,   0,   0, 0.9, 0.1),
cbind(  1,   0,   0,   0,   0)
)
)
e = eigen(t(P))
probs = Re(e$vectors[,1])/sum(Re(e$vectors[,1]))
expected_payout = 0
p = 200
while (expected_payout < 23.4375) {
p = p + 0.01
expected_payout = probs[5] * p
}
### OLD
best_actions = (1,0,0,0,2)
expected_payouts = (0,0,0,0,70)
payouts = c(0, 20, 30, 50, 70)
actions = c(1, 1, 1, 1, 2)
while(TRUE) {
for (s in 2:4) {
max_payout = 0
for (a in 1:2) {
actions[s] = a
#Update Payout
pays = c(0,0,0,0,0)
for (i in 1:5)
pays[i] = ifelse(actions[i] == 2, payouts[i], 0)
# expected payout
avg_payouts = NULL
for (i in 1:5)
avg_payouts = c(avg_payouts, pays[i]*probs[i])
avg_payout = sum(avg_payouts)
# Keep action tha optimized E[avg. payout]
if (avg_payout > max_payout) {
print(s)
best_actions[s] = a
expected_payouts[s] = avg_payout
max_payout = avg_payout
}
} # end actions
} # end states
actions = best_actions
cat(paste(sprintf("\tPayoutss: ")), expected_payouts)
cat(sprintf("\n"))
} #while
# Policy iteration
# intial P-matrix
P = as.matrix(
rbind(
cbind(0.8, 0.2,   0,   0,   0),
cbind(  0, 0.5, 0.5,   0,   0),
cbind(  0,   0, 0.7, 0.3,   0),
cbind(  0,   0,   0, 0.9, 0.1),
cbind(  1,   0,   0,   0,   0)
)
)
e = eigen(t(P))
probs = Re(e$vectors[,1])/sum(Re(e$vectors[,1]))
expected_payout = 0
p = 200
while (expected_payout < 23.4375) {
p = p + 0.01
expected_payout = probs[5] * p
}
expected_payout
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x = seq(0, 3, length.out=100)
f = x * exp(-2*x)
plot(x, f)
x = 0
x1 = x0 - x * exp(-2*x)/((1-2*x)*exp(-2*x)
x = 0
x1 = x0 - x * exp(-2*x)/((1-2*x)*exp(-2*x))
expected_payout
x = 0
x1 = x0 - x * exp(-2*x)/((1-2*x)*exp(-2*x))
x1 = x - x * exp(-2*x)/((1-2*x)*exp(-2*x))
x1
x1 = x - (x * exp(-2*x)-0.1)/((1-2*x)*exp(-2*x))
x1
x = 0
x1 = x - (x * exp(-2*x)-0.1)/((1-2*x)*exp(-2*x))
x = x1
x2 = x - (x * exp(-2*x)-0.1)/((1-2*x)*exp(-2*x))
x2
x = 0
x1 = x - (x * exp(-2*x)-0.1)/((1-2*x)*exp(-2*x))
x = x1
x2 = x - (x * exp(-2*x)-0.1)/((1-2*x)*exp(-2*x))
x = x2
fx = x * exp(-2*x) - 0.1
fx
x = seq(0, 5, length.out=100)
f = 0.5 *(4-x/2)*(8*x-x^2)
plot(x, f)
x = seq(2, 3, length.out=100)
f = 0.5 *(4-x/2)*(8*x-x^2)
plot(x, f)
source('~/Contract/2014_StatsLabs/Integrity/EvaluatePairs.R')
source('D:/Users/aableson/Documents/Dropbox/StatsProject/Labs/Lab11_MigraineCase_AA/GenerateData.R')
source('D:/Users/aableson/Documents/Dropbox/StatsProject/Labs/Lab11_MigraineCase_AA/GenerateData.R')
t = seq(0, 2*pi)
t = seq(pi/2, 3*pi/2, length.out=9)
x = cos(t)*0.6
x
y = sin(t)*2+2
y
x = cos(t)*0.4
y = sin(t)*1.5+1.5
rbind(x,y)
t(rbind(x,y))
sprintf("%.2f", t(rbind(x,y)))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
s = c(10, 10, 13, 15, 21, 22, 24, 24, 26, 31, 38, 39, 40, 41)
mean(s)
median(s)
x = c(0, 1, 2, 3, 4)
p = c(.2, .45, .2, .13, .02)
p * x
sum(p * x)
p = 0.4 * 48
s = sqrt(48*.4*.6)
dnorm
pnorm(17/48, p, s)
qnorm(17/48, p, s)
s = sqrt(48*.4*.6)
pnorm(17/48, 0.4, s)
17/48
s
pnorm(17, 0.4*48, s)
s
qnorm(17, 0.4*48, s)
pnorm(0.4*48, 0.4*48, s)
pnorm(17, 0.4*48, s)
.4*48
s
(17-19.2)/3.39
pnorm(16.5, 0.4*48, s)
log(15.5/17)
log(10)
log(exp(1))
log(7/17)/log(15.5/17)
2*sqrt(8)*.2*25  + 8*(-0.011)
2*sqrt(8)*(-0.011)*25  + 8*0.2
sqrt(8)/50*0.2
2*sqrt(8)*(-0.01131)*25  + 8*0.2
r = c(0, 5, 4.5, 3, 0)
co = c(1, 4, 2, 4, 1)
r*co
sum(r*co)
1050*.75
x = seq(-4, 4)
y = 3*x^2 - 2*x+5
plot(x, y)
y = 3*x^2 - 2*x-5
plot(x, y)
dot(c(1,3), c(4,5))
sum( c(1,3) * c(4, 5))
sum( c(-2, 3, 1) * c(2, 1, 4))
norm_vec <- function(x) sqrt(sum(x^2))
norm_vec(c(-2, 3, 1) )
norm_vec(c(-2, 3, 1)  )
norm_vec(c(2, 1, 4))
acos(3/(3.7*4.6))
3/(3.7*46)
3/(3.7*4.6)
cos(pi/2)
cos(pi/2 + pi/3)
4 * cos(pi/2 + pi/3)
sqrt(3)/2
cos(pi/3)
4 * cos(5*pi/6)
4 * sqrt(3)/2
MyData=read.csv(file.choose(), colClasses=c('factor', 'factor', 'factor', 'numeric', 'factor', 'numeric', 'factor', 'factor', 'numeric', 'numeric') sep = ",")
MyData=read.csv(file.choose(), colClasses=c('factor', 'factor', 'factor', 'numeric', 'factor', 'numeric', 'factor', 'factor', 'numeric', 'numeric'), sep = ",")
6^3
3^5
15/16
4/216
26/(3^5)
dbinom(0, 4, 0.5)
(6.2-9.27)/1.19
(8.89-9.27)/1.19
(8.89-9.3)/1.2
(8.8-9.3)/1.2
(8.9-9.3)/1.2
(6.2-9.3)/1.2
pnorm(0)
pnorm(-2.6)
pnorm(-0.3)
0.3821 - 0.0047
8.9 -0.84 * 1.2
9.3 -0.84 * 1.2
pnorm(-0.84, 0, 1)
(92-77)/10
(50-44)/12
(56.5- 60)/14
(69-53)/16
(69-53)/10
v1 = c(0.581, 0.104, 0.11, 0.205)
sum(v1)
x = c(-4, 6, 8, 9)
dot(v1, x)
v1 * x
sum(v1 * x)
x - 1.025
dd = x - 1.025
dd^2 * v1
sum(dd^2 * v1)
sum(dd^2 * v1)
sqrt(sum(dd^2 * v1)()
sqrt(sum(dd^2 * v1)()
sqrt(sum(dd^2 * v1))
v1 = c(0.225, 0.104, 0.106, 0.081, 0.067, 0.028, 0.022, 0.367)
x = 1:8
v1*x
E = sum(v1*x)
E
x
(x-E)^2
v1 * (x-E)^2
sum(v1 * (x-E)^2)
sample( 1:6)
atan(3/2)
atan(3/2)*180/pi
90-atan(3/2)*180/pi
sqrt(5^2 + 9^2)
sqrt(5^2 + 10^2)
sqrt(5^2 + 11^2)
sqrt(5^2 + 12^2)
sqrt(5^2 + 13^2)
sqrt(6^2 + 12^2)
11+6+6+9+5+8+7+7
3*(4-1)^0.5 + 1
3*(9-1)^0.5 + 1
3*(1.5-1)^0.5 + 1
x = 2
102/144
144/102
-7/102*6 + 1.04
sum(  dbinom(20:100), 100, 0.12)
sum(  dbinom(20:100), 100, 0.12))
sum(  dbinom(20:100, 100, 0.12))
sum(  dbinom(20:100, 100, 0.12))
1 - pbinom(19, 100, 0.12)
x = seq(from=0, to=100, by=1)
y = dbinom(x, size=100, prob=0.12)
plot(y ~ x, type="h", col="purple", lwd=4, xlab="Number of shots on goal", ylab="Probability mass")
dbinom(10, size=100, prob=0.12)
x = seq(from=0, to=100, by = 1)
P2 = sum( dbinom(x, size=100, prob=0.12))
P2
P3 = pbinom(10, size=100, prob=0.12)
1 - P3
help(MASS)
library(MASS)
help("abbey")
data()
data("abbey")
help(MASS)
help("MASS")
library(MASS)
data(Animals)
names(Animals)
plot(brain ~ body, data=Animals)
data(biopsy)
names(biopsy)
summary(biopsy)
data("Boston")
summary(Boston)
data("caith")
summary(caith)
caith
data(Cars93)
Cars93
data(coop)
coop
names(coop)
data(crabs)
crabs
data(DDT)
DDT
data(eagles)
eagles
data(epil)
epil
data(housing)
housing
data(minn38)
minn38
data(minn38)
N = sum(minn38$f)
N
names(minn38)
nrow(minn38)
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R')
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R')
warnings()
data(minn38)
N = sum(minn38$f)
v = data.frame(N, 4)
vc = 1;
for (r in 1:nrow(minn38)) {
v[vcov(), ] = minn38[r, 1:4];
vc = vc + 1;
}
for (r in 1:nrow(minn38)) {
v[vc, ] = minn38[r, 1:4];
vc = vc + 1;
}
minn38[r, 1:4]
v[vc, ]
v = data.frame(hs = "U", phs = "O", fol = "F7", Sex = "M")
vc = 1;
for (r in 1:nrow(minn38)) {
v[vc, ] = minn38[r, 1:4];
vc = vc + 1;
}
v
warnings()
summary(minn38)
v$hs <- factor(minn38$hs)
v$hs
v$hs <- factor(minn38$hs)
v$phs <- factor(minn38$phs)
v$fol <- factor(minn38$fol)
v$Sex <- factor(minn38$sex)
vc = 1;
for (r in 1:nrow(minn38)) {
v[vc, ] = minn38[r, 1:4];
vc = vc + 1;
}
v
N
vc
r
vc = 1;
for (r in 1:nrow(minn38)) {
v[vc, ] = minn38[r, 1:4];
vc = vc + 1;
}
v
rep
rep(v[r,], 10)
rbind(rep(minn38[1,], 10), rep(minn38[2,], 20))
rep(v[r,], 10)
rep(v[r,], each=10)
rep(v[r,], times=10)
expandRows(minn38, "f")
install.packages("splitstackshape")
library(splitstackshape)
library(splitstackshape)
data(minn38)
data(minn38)
v = expandRows(minn38, "f")
v
nrow(v)
names(v)
names(v2) = c("HighSchool", "PostGrad", "FatherOccupLevel", "Sex")
v2 = v[sample(nrow(v)),]
names(v2) = c("HighSchool", "PostGrad", "FatherOccupLevel", "Sex")
write.csv(v2, file="MinnesotaHighSchool.csv", row.names = F);
setwd("D:/Users/aableson/Documents/OneDrive - Queen's University/IntroStats_LocalWork/PracticeProblems/Datasets")
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R', echo=TRUE)
names(v2) = c("HighSchoolRank", "PostGrad", "FatherOccupLevel", "Sex")
write.csv(v2, file="MinnesotaHighSchool.csv", row.names = F);
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R')
table(v2$HighSchoolRank, v2$PostGrad)
library(plyr)
install.packages("plyr")
library(plyr)
data(minn38)
v = expandRows(minn38, "f")
names(v) = c("HighSchoolRank", "PostGrad", "FatherOccupLevel", "Sex")
data(minn38)
v = expandRows(minn38, "f")
names(v) = c("HighSchoolRank", "PostGrad", "FatherOccupLevel", "Sex")
mapvalues(v$HighSchoolRank, from = c("L", "M", "U"), to = c("Lower", "Middle", "Upper"))
data(minn38)
v = expandRows(minn38, "f")
names(v) = c("HighSchoolRank", "PostGrad", "FatherOccupLevel", "Sex")
mapvalues(v$HighSchoolRank, from = c("L", "M", "U"), to = c("Lower", "Middle", "Upper"))
mapvalues(v$PostGrad, from = c("C", "N", "E", "O"), to = c("CollEduc", "NonColEduc", "Employed", "Other"))
# shuffle rows
v2 = v[sample(nrow(v)),]
mapvalues(v$hs, from = c"")
write.csv(v2, file="MinnesotaHighSchool.csv", row.names = F);
v2
v
data(minn38)
v = expandRows(minn38, "f")
names(v) = c("HighSchoolRank", "PostGrad", "FatherOccupLevel", "Sex")
v
mapvalues(v, from = c("L", "M", "U"), to = c("Lower", "Middle", "Upper"))
mapvalues(v$HighSchoolRank, from = c("L", "M", "U"), to = c("Lower", "Middle", "Upper"))
v$HighSchoolRank = mapvalues(v$HighSchoolRank, from = c("L", "M", "U"), to = c("Lower", "Middle", "Upper"))
v$PostGrad = mapvalues(v$PostGrad, from = c("C", "N", "E", "O"), to = c("CollEduc", "NonColEduc", "Employed", "Other"))
# shuffle rows
v
v2 = v[sample(nrow(v)),]
write.csv(v2, file="MinnesotaHighSchool.csv", row.names = F);
library(xlsx)
write.xlsx(v2, file="MinnesotaHighSchool.xlsx")
set.seed(239487);
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R')
disp(table(v2$HighSchoolRank, v2$PostGrad))
)
)
)
)
library(splitstackshape)
library(plyr)
library(xlsx)
set.seed(239487);
data(minn38)
v = expandRows(minn38, "f")
names(v) = c("HighSchoolRank", "PostGrad", "FatherOccupLevel", "Sex")
v$HighSchoolRank = mapvalues(v$HighSchoolRank, from = c("L", "M", "U"), to = c("Lower", "Middle", "Upper"))
v$PostGrad = mapvalues(v$PostGrad, from = c("C", "N", "E", "O"), to = c("CollEduc", "NonColEduc", "Employed", "Other"))
v2 = v[sample(nrow(v)),]
write.csv(v2, file="MinnesotaHighSchool.csv", row.names = F);
write.xlsx(v2, file="MinnesotaHighSchool.xlsx")
print(table(v2$HighSchoolRank, v2$PostGrad))
N = 176
v2 = v2[1:N,]
print(table(v2$HighSchoolRank, v2$PostGrad))
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R')
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R')
N = 345
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R')
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Mod06.R')
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Minnesota.R')
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Minnesota.R')
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Minnesota.R')
t = table(v2$HighSchoolRank, v2$PostGrad)
chisq.test(t)
qt(0.95, 6)
qt(0.05, 6)
qchisq(0.95, 6)
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Minnesota.R')
source('D:/Users/aableson/Documents/OneDrive - Queen\'s University/IntroStats_LocalWork/PracticeProblems/Datasets/R_datasets_to_xlsx_Minnesota.R')
setwd("D:/Users/aableson/Documents/Webwork/IntroStats/Module06ChiSquaredWithR/Testing")
MyData = read.csv("MinnesotaHighSchool.csv")
table(MyData$HighSchoolRank, MyData$PostGrad)
chisq.test(t)
pchisq(0.95, 6)
qchisq(0.95, 6)
source('D:/Users/aableson/Documents/Webwork/IntroStats/Module06ChiSquaredWithR/Testing/MinnesotaHighSchool.R')
t = table(MyData$HighSchoolRank, MyData$FatherOccupLevel)
print(t)
chisq.test(t)
df
dft = (nrow(t)-1) * (ncol(t) - 1)
print(sprintf('Deg Free = %d', dft)
print(sprintf('Deg Free = %d', dft))
print(t)
print(sprintf('Deg Free = %d', dft))
print(qchisq(0.95, dft))
t = table(MyData$HighSchoolRank, MyData$FatherOccupLevel)
dft = (nrow(t)-1) * (ncol(t) - 1)
print(sprintf('Deg Free = %d', dft))
print(t)
chisq.test(t)
print(qchisq(0.95, dft))
t = table(MyData$HighSchoolRank, MyData$Sex)
dft = (nrow(t)-1) * (ncol(t) - 1)
print(sprintf('Deg Free = %d', dft))
print(t)
chisq.test(t)
print(qchisq(0.95, dft))
t = table(MyData$PostGrad, MyData$FatherOccupLevel)
dft = (nrow(t)-1) * (ncol(t) - 1)
print(t)
chisq.test(t)
print(qchisq(0.95, dft))
t = table(MyData$PostGrad, MyData$FatherOccupLevel)
dft = (nrow(t)-1) * (ncol(t) - 1)
print(t)
chisq.test(t)
t = table(MyData$PostGrad, MyData$Sex)
dft = (nrow(t)-1) * (ncol(t) - 1)
print(t)
chisq.test(t)
print(qchisq(0.95, dft))
table(MyData$HighSchoolRank, MyData$Sex)
t2 = table(MyData$HighSchoolRank, MyData$Sex)
chisq.test(t2)
qchisq(0.95, 3)
qchisq(0.95, 2)
