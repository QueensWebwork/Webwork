
## DESCRIPTION
## Operations Research / Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('steady state', 'eigenvalues' 'eigenvectors')
## Tagged by aableson

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Queens')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
        "PGbasicmacros.pl",
        "PGanswermacros.pl",
        "PGmatrixmacros.pl",
	"parserRadioButtons.pl",
	"parserMultiAnswer.pl",
	"MathObjects.pl",
	"PGauxiliaryFunctions.pl",
        );
 
TEXT(beginproblem());    
Context("Numeric");
Context()->flags->set(tolerance=>.01);
$showPartialCorrectAnswers = 1;

# One step stock pricing study
$S0 = random(12, 68);
$s = random(0.05, 0.3, 0.01);  # volatility
$risk_free_r = random(0.02, 0.10, 0.01);  # risk-free interest

@Tlist = ('6 months', '1 year', '2 years');
@tlist = (6/12, 1, 2);
$p = random(0, scalar(@Tlist) - 1);
$T = $Tlist[$p]; # text version
$t = $tlist[$p]; # number of years

# Set the # intervals and time step
$N = list_random(20, 50, 100);
$dt = $t/$N; 

$u = exp($s * sqrt($dt));
$d = exp(-$s * sqrt($dt));
$q = (exp($risk_free_r * $dt) - $d)/($u - $d);

$disc = exp(-$risk_free_r * $dt);

# Strike price; $S0 +/- a few dollars
$X = $S0 + random(-2, 2);

# Generate the stock tree
$S = (new Matrix($N+1, $N+1 ))->clone();  
$S->assign(1, 1, $S0);
for ($c = 2; $c <= $N+1; $c++)  {
  $S->assign(1, $c, $S->element(1, $c-1)*$u);  
  for ($r = 2; $r <= $c; $r++)  {
    $S->assign($r, $c, $S->element($r-1, $c-1)*$d);  
  }
}

# Generate the option tree
$D = (new Matrix($N+1, $N+1 ))->clone();  
$c = $N+1;
for ($r = 1; $r <= $c; $r++)  {
  $DT = max($S->element($r, $c) - $X, 0);  
  $D->assign($r, $c, $DT);
}
for ($c = $N; $c >= 1; $c--)  {
  for ($r = 1; $r <= $c; $r++)  {
    $D1 = $D->element($r, $c+1);  
    $D2 = $D->element($r+1, $c+1);  
    $D->assign($r, $c, $disc* ($q * $D1 + (1-$q)*$D2));
  }
}
$D0 = Compute($D->element(1, 1))->with(
  tolType => 'absolute',
  tolerance => .02,
);

BEGIN_TEXT 
$PAR

The stock in company A is currently worth $DOLLAR$S0.  Recent 
tracking of the stock indicates it has a volatility of \(\sigma = $s\).

$PAR 
Banks are currently offering risk-free savings at \{$risk_free_r*100\}
percent interest, compounded continuously.

$PAR 

Use a stock pricing tree with $N intervals to compute the
arbitrage-free price of a European call option, given a strike price
of $DOLLAR$X and an expiry date $T from now. 

$BR
Round your answer to the nearest penny. 
$BR
\(D_0\) = \{ans_rule(10)\}

$PAR

Recall: a European call option can only be exercised on its maturity 
date; an American call option can be exercised anytime before
its maturity date.

END_TEXT

# Check answers
ANS($D0->cmp());

BEGIN_SOLUTION

$PAR
$BBOLD Solutions $EBOLD
$PAR

To build a simple risk-neutral binomial stock tree, use the
up/down factors of 
$BR
\( u = e^{\sigma ~\Delta t} \) and
$BR
\( d = e^{-\sigma ~\Delta t} \)

$BR At the expiry date, you can compute the value of the option by
subtracting the strike price from each possible stock price; where the
values are negative (stock is worth less than the strike), replace the
option values with zero.

$PAR 
For the appropriate option calculations at each stage, use
$BR
\( D_{\mbox{now}} = e^{-r ~\Delta t} \left( q D_u + (1-q) D_d \right) \)
$BR where \(q\) is the risk-neutral 'up' probability, given by
$BR
\( q = \frac{e^{r~\Delta t} - d}{u - d} \)  

END_SOLUTION


ENDDOCUMENT();       # This should be the last executable line in the problem.
