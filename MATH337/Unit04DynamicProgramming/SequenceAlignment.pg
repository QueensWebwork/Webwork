 ## DESCRIPTION
## Operations Research / Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('steady state', 'eigenvalues' 'eigenvectors')
## Tagged by aableson

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Queens')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
        "PGbasicmacros.pl",
        "PGanswermacros.pl",
        "PGmatrixmacros.pl",
        "PGauxiliaryFunctions.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"MathObjects.pl",
	"unionLists.pl",
	"contextArbitraryString.pl",
        );
 
TEXT(beginproblem());    
Context("Numeric");
Context()->flags->set(tolerance=>.01);
$showPartialCorrectAnswers = 1;

# Parameters
$match_score = random(0.8, 1.5, 0.1);
$gap_score = random(-1, -0.5, 0.1);

# Two sequences
$len1 = random(10, 13);
@alphabet = qw(A C T G);

$seq1 = "";
for ($i = 0; $i < $len1; $i++) {
  $c = $alphabet[random(0, 3)];
  $seq1 = "${seq1}$c"; 
}

@seq2_arr = split($seq1, "");
# Do some mutation
$mutation_p = random(0.3* $len1, 0.4 * $len1);
for ($i = 0; $i < $len1; $i++) {
    if (random(0, 1, 0.01) < $mutation_p) { # if mutate
      $seq2_arr[$i] = $alphabet[random(0, 3)]; 
    }
}
# Do some insertions
$p_insert = 0.2;
for ($i = 0; $i < $len1; $i++) {
    if (random(0, 1, 0.01) < $p_insert) {
      splice(@seq2_arr,$i,0,$alphabet[random(0, 3)]);
    }
}
# Do some deletion
$p_delete = 0.1;

# Put the sequence back into a string
$seq2 = join("", @seq2_arr);

# Randomly swap longer seq2 for seq1
if (random(0, 1) == 1) {
  $seq_tmp = $seq1;
  $seq1 = $seq2;
  $seq2 = $seq_tmp;
}

# Sample sequences to show the scoring calculations
$sample_seq1 = "ACTG-A";
$sample_seq2 = "-CTTCA";
$sample_num_matches = 3;
$sample_num_gaps = 2;
$sample_num_mismatches = 1;

# Generate the solutions
@s1 = split("", $seq1);
@s2 = split("", $seq2);
$len1 = scalar(@s1);
$len2 = scalar(@s2);
$M = (new Matrix($len1+1, $len2+1 ))->clone();  


# Fill in the bottom row, last column
$M->assign($len1+1, $len2+1, 0);
for ($p1 = $len1; $p1 >= 1; $p1--) {
  $M->assign($p1, $len2+1, $M->element($p1+1, $len2 + 1) + $gap_score);
}
for ($p2 = $len2; $p2 >= 1; $p2--) {
  $M->assign($len1+1, $p2, $M->element($len1+1, $p2+1) + $gap_score);
}

# Compute the interior values with max of possible subsequence
# extensions;  see notes
for ($p1 = $len1; $p1 >= 1; $p1--) {
  for ($p2 = $len2; $p2 >= 1; $p2--) {
    $gap1 = $M->element($p1+1, $p2) + $gap_score;
    $gap2 = $M->element($p1, $p2+1) + $gap_score;
    if ($s1[$p1-1] =~ /$s2[$p2-1]/) { # sequence match
      $match = $match_score + $M->element($p1+1, $p2+1); }
    else { # mis-match/ no penalty or score
      $match = $M->element($p1+1, $p2+1);
    }
    # Find the max of all three possibilities
    $M->assign($p1, $p2,  max(max($gap1, $gap2), $match) );
  }
}

# Round all values to 1 decimal
for ($p1 = 1; $p1 <= $len1 + 1; $p1++) { 
  for ($p2 = 1; $p2 <= $len2 + 1; $p2++) { 
    $M->assign($p1, $p2,  floor( 10 * ($M->element($p1, $p2)) + 0.49)/10);
  }
}

$opt_score = $M->element(1, 1);
Context()->strings->add("A"=>{}, "C"=>{}, "T"=>{}, "G" => {});
Context("ArbitraryString");
$seq_alignment_entry = MultiAnswer(String($seq1), String($seq2))->with(
    singleResult => 1,
    allowBlankAnswers => 1,
  checker => sub {
    my ($correct, $student, $ansHash) = @_;
    my ($stud_seq1, $stud_seq2) = @{$student};
    my ($orig_seq1, $orig_seq2) = @{$correct};

    # Make sure both sequences are the same length
    my @s1 = split("", $stud_seq1); 
    my @s2 = split("", $stud_seq2); 
    if (scalar(@s1) != scalar(@s2)) {
        Value->Error("Both sequences must be the same length.  Add gaps ('-' symbols) as necessary.");
	return 0;
    }

    # Verify that only upper case ACTG and dashes were used
    for ($i = @s1-1; $i >= 0; $i--) {
      if ($s1[$i] =~ /[^[ACTG-]/) {
    
        Value->Error("Your sequence 1 <br/>$stud_seq1<br/> contains letters other than A,C,T,G and dashes");
        return 0;
      }
    } 
    for ($i = @s2-1; $i >= 0; $i--) {
      if ($s2[$i] =~ /[^[ACTG-]/) {
    
        Value->Error("Your sequence 2 <br/>$stud_seq2<br/> contains letters other than A,C,T,G and dashes");
        return 0;
      }
    } 

    # Verify that the sequences are the same as the originals
    my @clean_s1 = @s1;
    for ($i = @clean_s1-1; $i >= 0; $i--) {
      if ($clean_s1[$i] =~ /-/) {
        splice(@clean_s1, $i, 1); 
      } 
    }
    my $clean_s1_str = join("", @clean_s1);
    if ($clean_s1_str !~ /^$orig_seq1$/) {
        Value->Error("Your sequence 1 is <br/>$clean_s1_str, but the original was <br/>$orig_seq1");
        return 0;
    } 

    my @clean_s2 = @s2;
    for ($i = @clean_s2-1; $i >= 0; $i--) {
      if ($clean_s2[$i] =~ /-/) {
        splice(@clean_s2, $i, 1); 
      } 
    }
    my $clean_s2_str = join("", @clean_s2);
    if ($clean_s2_str !~ /^$orig_seq2$/) {
        Value->Error("Your sequence 2 is <br/>$clean_s2_str, but the original was <br/>$orig_seq2");
        return 0;
    } 

    # Find the score of their alignment
    $score = 0;
$match_count = 0;
$gap_count = 0;
    for ($i = 0; $i < @s1; $i++) { # Both sequences are of same length by now
      if ($s1[$i] =~ /^$s2[$i]$/) {
        $score = $score + $match_score;
        $match_count += 1;
      }
      elsif ( ($s1[$i] =~ /^[^ACTG]/)  || ($s2[$i] =~ /^[^ACTG]/)) {
        $score = $score + $gap_score;
        $gap_count += 1;
      }
    }

    # Debugging
#     Value->Error("Alignment score is $score, optimal is $opt_score ($match_count matches, $gap_count gaps)");
#     return 0;

    # Validate whether alignment has optimal score
    if ($score < $opt_score) {
        Value->Error("Your alignment only produces a score of $score ($match_count matches, $gap_count gaps) which is less than optimal.");
        return 0;
    }

    return 1;}
);


BEGIN_TEXT 
$PAR
$BR

You are asked to find the optimal global sequence alignment, as shown
in class, between the following sequences:

\{BeginList("UL") \}
$ITEM <div style="font-family:monospace">\{$seq1\}</div> and 
$ITEM  <div style="font-family:monospace">\{$seq2\} </div>
\{EndList("UL")\}

The scoring to use for the alignment is:
$BR 
\{BeginList("UL") \}
$ITEM \{$match_score\} points for an exact match (aligning two identical symbols),
$ITEM 0 points for an mis-match (aligning two different symbols), and
$ITEM \{$gap_score\} points for a gap (aligning a symbol in one sequence with a gap in the other).
\{EndList("UL")\}

$BBOLD Example: $EBOLD the alignment
$BR <div style="font-family:monospace">\{$sample_seq1\} </div>
<div style="font-family:monospace">\{$sample_seq2\} </div>
would have a score of 
\{BeginList("UL") \}
$ITEM \(3 \times $match_score = \) \{ ($sample_num_matches * $match_score) \} points for exact matches,
$ITEM 0 points for the \{ $sample_num_mismatches \} mismatch, 
$ITEM \($sample_num_gaps \times $gap_score = \) \{$sample_num_gaps * $gap_score\}  points for the \{$sample_num_gaps\} gaps,
\{EndList("UL")\}
for a total score of 
\{ ($sample_num_matches * $match_score) + ($sample_num_gaps * $gap_score)\}  points.

$PAR
A) What is the optimal score among all possible alignments of these two sequences?
$BR Optimal score: \{ans_rule(10)\}

$PAR
B) Enter an alignment between the two sequences, using the '-' symbol
where a gap is required.
\{begintable(3) \}
\{ row( "Sequence 1", $seq1,  $seq_alignment_entry->ans_rule(25)) \} 
\{ row( "Sequence 2", $seq2,  $seq_alignment_entry->ans_rule(25)) \} 
\{ endtable() \}




END_TEXT

# Check the optimal value
ANS(num_cmp($opt_score));

# Check whether the aligned sequences generate the maximum score
ANS($seq_alignment_entry->cmp()); 

BEGIN_SOLUTION

$SOL 
$PAR
Here is the alignment scoring matrix. To make
it look like the alignments seen in class, write the first sequence 
down the left side, and the second sequence along the top.
$PAR 
Solution matrix:
\{display_matrix($M)\}


END_SOLUTION


ENDDOCUMENT();       # This should be the last executable line in the problem.
