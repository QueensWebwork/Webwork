
## DESCRIPTION
## Operations Research / Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('steady state', 'eigenvalues' 'eigenvectors')
## Tagged by aableson

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Queens')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
        "PGbasicmacros.pl",
        "PGanswermacros.pl",
        "PGmatrixmacros.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"MathObjects.pl",
	"unionLists.pl",
	"PGauxiliaryFunctions.pl",
        );


 
TEXT(beginproblem());    
Context("Numeric");
Context()->flags->set(tolerance=>.01);
$showPartialCorrectAnswers = 1;

# Parameters
$ver = random(1, 4);

if ($ver == 1) {
@D = (10, 12, 8, 8, 15);
$num_stores = 5;
$sold_profit = 22.00;
$unsold_profit = -6.00;
$unmet_profit = -3.00;

$total_demand = 53;
$max_supply = 100;
@f_star_last = (-45.00, -20.00, 5.00, 30.00, 54.99, 79.97, 104.88, 129.64, 154.08, 177.92, 200.76, 222.09, 241.36, 258.06, 271.80, 282.37, 289.76, 294.17, 295.95, 295.55, 293.42, 289.99, 285.64, 280.65, 275.26, 269.60, 263.79, 257.90, 251.95, 245.98, 239.99, 234.00, 228.00, 222.00, 216.00, 210.00, 204.00, 198.00, 192.00, 186.00, 180.00, 174.00, 168.00, 162.00, 156.00, 150.00, 144.00, 138.00, 132.00, 126.00, 120.00, 114.00, 108.00, 102.00, 96.00, 90.00, 84.00, 78.00, 72.00, 66.00, 60.00, 54.00, 48.00, 42.00, 36.00, 30.00, 24.00, 18.00, 12.00, 6.00, 0.00, -6.00, -12.00, -18.00, -24.00, -30.00, -36.00, -42.00, -48.00, -54.00, -60.00, -66.00, -72.00, -78.00, -84.00, -90.00, -96.00, -102.00, -108.00, -114.00, -120.00, -126.00, -132.00, -138.00, -144.00, -150.00, -156.00, -162.00, -168.00, -174.00, -180.00);
$last_opt_s = 18;
$last_opt_f = 295.95;
@f_star_sec_last = (-69.00, -44.00, -19.00, 6.00, 30.99, 55.98, 80.96, 105.87, 130.77, 155.54, 180.11, 204.55, 228.39, 252.08, 274.91, 296.83, 318.15, 337.43, 356.50, 373.20, 388.49, 402.23, 413.19, 423.75, 431.14, 437.77, 442.18, 444.97, 446.75, 446.46, 446.06, 443.92, 441.39, 437.97, 433.94, 429.59, 424.65, 419.66, 414.27, 408.80, 403.15, 397.40, 391.60, 385.71, 379.81, 373.87, 367.92, 361.94, 355.96, 349.98, 343.98, 337.99, 331.99, 326.00, 320.00, 314.00, 308.00, 302.00, 296.00, 290.00, 284.00, 278.00, 272.00, 266.00, 260.00, 254.00, 248.00, 242.00, 236.00, 230.00, 224.00, 218.00, 212.00, 206.00, 200.00, 194.00, 188.00, 182.00, 176.00, 170.00, 164.00, 158.00, 152.00, 146.00, 140.00, 134.00, 128.00, 122.00, 116.00, 110.00, 104.00, 98.00, 92.00, 86.00, 80.00, 74.00, 68.00, 62.00, 56.00, 50.00, 44.00);
$sec_last_opt_s = 28;
$sec_last_opt_f = 446.75;
$x_star = Matrix->new_from_array_ref([[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19],
[0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27],
[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29],
[0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 17, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39, 39, 40, 40, 41, 42, 44, 40],
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]);
@f_star_store_1 = (-159.00, -134.00, -109.00, -84.00, -59.00, -34.00, -9.01, 15.99, 40.98, 65.97, 90.95, 115.94, 140.91, 165.84, 190.75, 215.67, 240.57, 265.48, 290.24, 315.01, 339.69, 364.26, 388.83, 413.27, 437.64, 461.74, 485.58, 509.26, 532.95, 556.53, 579.45, 602.28, 624.51, 646.42, 668.33, 689.66, 710.62, 730.82, 750.09, 769.16, 788.24, 806.41, 823.89, 840.60, 855.88, 871.17, 885.85, 900.09, 913.83, 924.79, 935.74, 946.55, 957.24, 967.80, 975.19, 982.34, 989.26, 995.89, 1002.53, 1006.94, 1010.81, 1014.21, 1016.99, 1019.78, 1021.56, 1022.63, 1023.09, 1022.80, 1022.51, 1022.11, 1020.93, 1019.13, 1017.00, 1014.47, 1011.94, 1009.08, 1005.66, 1002.24, 998.21, 994.19, 990.14, 985.79, 981.30, 976.46, 971.52, 966.58, 961.60, 956.43, 951.09, 945.70, 940.23, 934.77, 929.21, 923.57, 917.92, 912.17, 906.43, 900.65, 894.84, 889.03, 883.14);
$first_opt_s = 66;
$first_opt_f = 1023.09;
}
elsif ($ver == 2) {
@D = (8, 10, 10, 20, 7);
$num_stores = 5;
$sold_profit = 15.00;
$unsold_profit = -3.00;
$unmet_profit = -6.00;

$total_demand = 55;
$max_supply = 100;
@f_star_last = (-42.00, -21.02, -0.20, 20.09, 39.13, 55.98, 69.76, 79.97, 86.60, 90.10, 91.17, 90.53, 88.81, 86.46, 83.77, 80.91, 77.96, 74.99, 72.00, 69.00, 66.00, 63.00, 60.00, 57.00, 54.00, 51.00, 48.00, 45.00, 42.00, 39.00, 36.00, 33.00, 30.00, 27.00, 24.00, 21.00, 18.00, 15.00, 12.00, 9.00, 6.00, 3.00, -0.00, -3.00, -6.00, -9.00, -12.00, -15.00, -18.00, -21.00, -24.00, -27.00, -30.00, -33.00, -36.00, -39.00, -42.00, -45.00, -48.00, -51.00, -54.00, -57.00, -60.00, -63.00, -66.00, -69.00, -72.00, -75.00, -78.00, -81.00, -84.00, -87.00, -90.00, -93.00, -96.00, -99.00, -102.00, -105.00, -108.00, -111.00, -114.00, -117.00, -120.00, -123.00, -126.00, -129.00, -132.00, -135.00, -138.00, -141.00, -144.00, -147.00, -150.00, -153.00, -156.00, -159.00, -162.00, -165.00, -168.00, -171.00, -174.00);
$last_opt_s = 10;
$last_opt_f = 91.17;
@f_star_sec_last = (-162.00, -141.00, -120.00, -99.00, -78.00, -57.00, -36.00, -15.01, 5.97, 26.95, 47.90, 68.78, 89.61, 110.35, 130.83, 151.12, 171.19, 190.60, 209.64, 228.12, 245.36, 262.21, 277.91, 291.78, 305.56, 317.41, 327.61, 337.33, 344.91, 351.54, 357.09, 360.80, 364.30, 366.40, 367.47, 368.23, 367.92, 367.29, 366.15, 364.44, 362.69, 360.52, 358.17, 355.69, 353.01, 350.32, 347.52, 344.65, 341.77, 338.83, 335.89, 332.92, 329.95, 326.97, 323.98, 320.99, 317.99, 314.99, 312.00, 309.00, 306.00, 303.00, 300.00, 297.00, 294.00, 291.00, 288.00, 285.00, 282.00, 279.00, 276.00, 273.00, 270.00, 267.00, 264.00, 261.00, 258.00, 255.00, 252.00, 249.00, 246.00, 243.00, 240.00, 237.00, 234.00, 231.00, 228.00, 225.00, 222.00, 219.00, 216.00, 213.00, 210.00, 207.00, 204.00, 201.00, 198.00, 195.00, 192.00, 189.00, 186.00);
$sec_last_opt_s = 35;
$sec_last_opt_f = 368.23;
$x_star = Matrix->new_from_array_ref([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16],
[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22],
[0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30],
[0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 19, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 32, 33, 34, 34, 35, 35, 36, 37, 37, 38, 38, 39, 40, 40, 41, 41, 42, 43, 43, 44, 44, 45, 46, 46, 47, 47, 48, 49, 49, 50, 50, 51, 52, 52, 53, 53, 54, 54, 55, 56, 56, 57, 57, 58, 59, 59, 60, 60, 61, 62, 62, 63, 63, 63],
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]);
@f_star_store_1 = (-330.00, -309.00, -288.00, -267.00, -246.00, -225.00, -204.00, -183.00, -162.00, -141.01, -120.02, -99.03, -78.04, -57.06, -36.08, -15.13, 5.80, 26.73, 47.66, 68.54, 89.37, 110.12, 130.87, 151.61, 172.28, 192.77, 213.07, 233.36, 253.65, 273.72, 293.70, 313.11, 332.50, 351.89, 370.93, 389.54, 408.02, 425.90, 443.77, 461.02, 477.87, 494.28, 509.99, 525.71, 541.40, 555.27, 569.05, 582.53, 595.55, 608.56, 620.40, 630.61, 640.74, 650.75, 660.76, 670.47, 678.05, 685.06, 692.07, 698.85, 705.48, 711.03, 715.31, 719.58, 723.39, 727.09, 730.59, 732.69, 734.70, 736.70, 738.12, 739.19, 739.95, 740.20, 740.45, 740.15, 739.83, 739.20, 738.20, 737.20, 736.07, 734.60, 732.88, 731.14, 729.31, 727.48, 725.31, 723.13, 720.78, 718.42, 716.07, 713.60, 711.01, 708.35, 705.70, 703.02, 700.33, 697.52, 694.72, 691.89, 689.06);
$first_opt_s = 74;
$first_opt_f = 740.45;

}
elsif($ver == 3) {
@D = (14, 7, 7, 18, 10);
$num_stores = 5;
$sold_profit = 21.00;
$unsold_profit = -5.00;
$unmet_profit = -2.00;

$total_demand = 56;
$max_supply = 100;
@f_star_last = (-20.00, 3.00, 25.98, 48.91, 71.62, 93.80, 114.92, 134.28, 151.11, 164.79, 174.97, 181.64, 185.13, 185.97, 184.77, 182.10, 178.47, 174.22, 169.62, 164.83, 159.92, 154.97, 149.99, 144.99, 140.00, 135.00, 130.00, 125.00, 120.00, 115.00, 110.00, 105.00, 100.00, 95.00, 90.00, 85.00, 80.00, 75.00, 70.00, 65.00, 60.00, 55.00, 50.00, 45.00, 40.00, 35.00, 30.00, 25.00, 20.00, 15.00, 10.00, 5.00, -0.00, -5.00, -10.00, -15.00, -20.00, -25.00, -30.00, -35.00, -40.00, -45.00, -50.00, -55.00, -60.00, -65.00, -70.00, -75.00, -80.00, -85.00, -90.00, -95.00, -100.00, -105.00, -110.00, -115.00, -120.00, -125.00, -130.00, -135.00, -140.00, -145.00, -150.00, -155.00, -160.00, -165.00, -170.00, -175.00, -180.00, -185.00, -190.00, -195.00, -200.00, -205.00, -210.00, -215.00, -220.00, -225.00, -230.00, -235.00, -240.00);
$last_opt_s = 13;
$last_opt_f = 185.97;
@f_star_sec_last = (-56.00, -33.00, -10.00, 13.00, 36.00, 59.00, 82.00, 104.99, 127.97, 150.94, 173.87, 196.78, 219.59, 242.30, 264.87, 287.05, 309.20, 330.66, 351.78, 372.22, 391.57, 410.58, 427.75, 444.59, 459.56, 473.24, 485.74, 495.92, 505.80, 513.05, 519.73, 524.50, 527.99, 530.53, 531.37, 531.99, 531.05, 529.85, 527.68, 525.01, 521.93, 518.29, 514.54, 510.33, 506.09, 501.57, 496.97, 492.26, 487.46, 482.63, 477.72, 472.82, 467.87, 462.91, 457.94, 452.96, 447.97, 442.98, 437.99, 432.99, 427.99, 423.00, 418.00, 413.00, 408.00, 403.00, 398.00, 393.00, 388.00, 383.00, 378.00, 373.00, 368.00, 363.00, 358.00, 353.00, 348.00, 343.00, 338.00, 333.00, 328.00, 323.00, 318.00, 313.00, 308.00, 303.00, 298.00, 293.00, 288.00, 283.00, 278.00, 273.00, 268.00, 263.00, 258.00, 253.00, 248.00, 243.00, 238.00, 233.00, 228.00);
$sec_last_opt_s = 35;
$sec_last_opt_f = 531.99;
$x_star = Matrix->new_from_array_ref([[0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25],
[0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 25, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 32, 32, 33, 33, 34, 34, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 57, 57, 58, 58],
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]);
@f_star_store_1 = (-112.00, -89.00, -66.00, -43.00, -20.00, 3.00, 26.00, 49.00, 72.00, 94.99, 117.98, 140.97, 163.96, 186.93, 209.91, 232.88, 255.83, 278.75, 301.67, 324.51, 347.31, 370.11, 392.91, 415.62, 438.22, 460.79, 482.97, 505.14, 527.31, 549.46, 571.57, 593.04, 614.30, 635.42, 656.13, 676.84, 697.27, 717.21, 736.57, 755.58, 773.73, 791.89, 809.97, 827.14, 843.98, 859.69, 874.67, 889.25, 903.83, 917.51, 930.47, 942.97, 953.38, 963.79, 973.97, 983.96, 993.84, 1001.10, 1008.12, 1014.80, 1021.04, 1027.27, 1032.05, 1036.30, 1039.79, 1042.38, 1044.96, 1047.50, 1049.34, 1050.18, 1050.80, 1050.64, 1050.38, 1050.13, 1049.19, 1047.98, 1046.27, 1044.10, 1041.86, 1039.62, 1036.95, 1034.10, 1031.01, 1027.50, 1023.99, 1020.36, 1016.70, 1012.95, 1008.76, 1004.55, 1000.31, 996.06, 991.82, 987.30, 982.77, 978.17, 973.53, 968.89, 964.18, 959.44, 954.64);
$first_opt_s = 70;
$first_opt_f = 1050.80;
}
elsif($ver == 4) {
@D = (7, 10, 15, 14, 8);
$num_stores = 5;
$sold_profit = 21.00;
$unsold_profit = -6.00;
$unmet_profit = -8.00;

$total_demand = 54;
$max_supply = 100;
@f_star_last = (-64.00, -35.01, -6.12, 22.40, 49.92, 75.43, 97.74, 115.77, 128.92, 137.18, 141.09, 141.54, 139.46, 135.69, 130.89, 125.49, 119.78, 113.91, 107.96, 101.99, 95.99, 90.00, 84.00, 78.00, 72.00, 66.00, 60.00, 54.00, 48.00, 42.00, 36.00, 30.00, 24.00, 18.00, 12.00, 6.00, -0.00, -6.00, -12.00, -18.00, -24.00, -30.00, -36.00, -42.00, -48.00, -54.00, -60.00, -66.00, -72.00, -78.00, -84.00, -90.00, -96.00, -102.00, -108.00, -114.00, -120.00, -126.00, -132.00, -138.00, -144.00, -150.00, -156.00, -162.00, -168.00, -174.00, -180.00, -186.00, -192.00, -198.00, -204.00, -210.00, -216.00, -222.00, -228.00, -234.00, -240.00, -246.00, -252.00, -258.00, -264.00, -270.00, -276.00, -282.00, -288.00, -294.00, -300.00, -306.00, -312.00, -318.00, -324.00, -330.00, -336.00, -342.00, -348.00, -354.00, -360.00, -366.00, -372.00, -378.00, -384.00);
$last_opt_s = 11;
$last_opt_f = 141.54;
@f_star_sec_last = (-176.00, -147.00, -118.00, -89.00, -60.02, -31.03, -2.10, 26.80, 55.61, 84.12, 112.63, 140.52, 168.04, 194.86, 220.38, 245.55, 268.40, 290.71, 310.60, 328.64, 345.09, 358.24, 370.98, 380.02, 388.28, 393.85, 397.77, 400.31, 400.75, 400.80, 398.91, 396.83, 393.50, 389.74, 385.41, 380.61, 375.62, 370.22, 364.81, 359.14, 353.42, 347.60, 341.73, 335.82, 329.88, 323.92, 317.95, 311.97, 305.98, 299.99, 293.99, 287.99, 282.00, 276.00, 270.00, 264.00, 258.00, 252.00, 246.00, 240.00, 234.00, 228.00, 222.00, 216.00, 210.00, 204.00, 198.00, 192.00, 186.00, 180.00, 174.00, 168.00, 162.00, 156.00, 150.00, 144.00, 138.00, 132.00, 126.00, 120.00, 114.00, 108.00, 102.00, 96.00, 90.00, 84.00, 78.00, 72.00, 66.00, 60.00, 54.00, 48.00, 42.00, 36.00, 30.00, 24.00, 18.00, 12.00, 6.00, 0.00, -6.00);
$sec_last_opt_s = 29;
$sec_last_opt_f = 400.80;
$x_star = Matrix->new_from_array_ref([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15],
[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 22],
[0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38],
[0, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 51, 51, 52, 52, 53, 54, 54, 54, 57, 57, 57, 57, 57],
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]);
@f_star_store_1 = (-432.00, -403.00, -374.00, -345.00, -316.00, -287.00, -258.00, -229.01, -200.01, -171.03, -142.04, -113.06, -84.09, -55.12, -26.19, 2.72, 31.62, 60.51, 89.32, 118.07, 146.80, 175.44, 203.96, 232.46, 260.83, 288.80, 316.77, 344.66, 372.35, 399.87, 426.69, 453.35, 479.90, 506.04, 531.55, 556.72, 581.58, 606.02, 628.97, 651.82, 674.35, 696.66, 717.95, 737.85, 757.48, 775.96, 793.99, 811.34, 827.80, 844.08, 857.34, 870.49, 883.46, 896.21, 908.91, 918.02, 927.06, 935.65, 943.91, 951.96, 957.71, 963.29, 967.90, 971.82, 975.30, 978.09, 980.63, 981.93, 982.37, 982.69, 982.74, 982.67, 981.42, 979.78, 977.89, 975.81, 973.26, 970.18, 967.08, 963.76, 959.99, 955.86, 951.72, 947.42, 943.10, 938.30, 933.44, 928.45, 923.40, 918.34, 913.02, 907.63, 902.21, 896.71, 891.16, 885.55, 879.88, 874.17, 868.42, 862.63, 856.83);
$first_opt_s = 70;
$first_opt_f = 982.74;
}

# Random elements
$available_cases = random($total_demand -10, min($max_supply, $total_demand + 20));

$last_store_s =  $D[@D-1] + non_zero_random(-3, 3);

# Max profit - all sales, no losses
$max_profit = $available_cases * $sold_profit;

# Tables 
$table_D_start = begintable(8);
$table_D_row1  = row( "Store ", 1, 2, 3, 4, 5); 
$table_D_row2  = row( "Expected Demand", @D);
$table_D_end   = endtable();

# Submission of optimal numbers of cases
$table_x_start = begintable(8);
$table_x_row1  = row( "Store ", 1, 2, 3, 4, 5); 
# ROW2, with the ans_rules, needs to be created in-line with the text.
# That way, the order of the answers presented to the students is the 
# same as the order they entered them.
# $table_x_row2  = row( "Cases to assign", ans_rule(6), ans_rule(6),ans_rule(6),ans_rule(6),ans_rule(6));
$table_x_end   = endtable();

# Computation of optimal assignment
@x_opt = "0" x $num_stores;
$s = $available_cases;
for ($store = 1; $store <= $num_stores; $store++) {
   $x_opt[$store-1] = $x_star->element($store, $s+1);
   $s = $s - $x_opt[$store-1];
}

BEGIN_TEXT

A chain of grocery stores has \{$S\} stores served by a single warehouse.
\{BeginList("UL") \}
$ITEM A shipment with \{$available_cases\} cases of strawberries arrives at the warehouse,
and will be distributed to the stores.  
$ITEM The strawberries will be on
sale for 4 days, after which they will go bad and be thrown out. 
$ITEM Based on historical data, the average demand for strawberries over 4 days
will be:
\{EndList("UL")\}
$table_D_start
$table_D_row1
$table_D_row2
$table_D_end

$BBOLD Note: $EBOLD the $BITALIC actual$EITALIC demand for each store will be random; the demand distributions will be Poisson, with the means noted above.  

$PAR
Our overall goal will be to find the distribution of the \{$available_cases\} cases to the stores that will $BBOLD
  maximize the expected profit on cases sold$EBOLD.
\{BeginList("UL") \}
$ITEM Each $BBOLD sold$EBOLD case yields $\{$sold_profit\} profit.
$ITEM Each $BBOLD unsold$EBOLD case costs $\{ abs($unsold_profit)\} (loss).
$ITEM Each case which was wanted by customers, but which couldn't be met
with the assigned supply, costs $\{ abs( $unmet_profit)\} (estimated penalty for associated/future lost sales).
\{EndList("UL")\}

$PAR 

Starting with the last store, Store \{$num_stores\}, you will use
dynamic programming to compute the optimal distribution of cases to
stores.  The following questions will follow your progress through
that calculation.  

$PAR

A) If you were to sell every case, and have no unmet demand, what
would your profit be?  (This is an upper limit on your expected profit.)
$BR
Profit if all cases were sold: $\{ans_rule(10)\} 

$PAR 
$PAR  
B) If \{$last_store_s\} cases were left to assign to the last store, with
mean demand \{$D[num_stores-1]\}, what would the expected profit from
that store be?
$BR
Expected profit in last store given \{$last_store_s\} cases assigned: 
$\{ans_rule(10)\} 
$PAR

C) If we just consider the last store by itself, what would be the optimal number of cases to assign, and what would the resulting profit be?
$BR
Optimal number of cases for last store: \{ans_rule(10)\}
$BR
Resulting profit:  $\{ans_rule(10)\}

$PAR

D) If we just consider the last $BBOLD two stores$EBOLD by themselves,
what would be the optimal number of cases to assign (in total) to
them, and what would the resulting profit be?  

$BR Optimal number of cases for last two stores: \{ans_rule(10)\}
$BR
Resulting profit:  $\{ans_rule(10)\}

$PAR

E) Given you have \{$available_cases\} cases to divide between $BBOLD all $EBOLD the
stores, what assignment of these cases to the stores would result in the $BBOLD maximum expected profit$EBOLD?

$table_x_start
$table_x_row1
\{ row( "Cases to assign", ans_rule(6), ans_rule(6),ans_rule(6),ans_rule(6),ans_rule(6)) \}
$table_x_end
$BR Expected total profit:  $\{ans_rule(10)\}

$PAR

F) If you could have ordered any number of cases to share between
$BBOLD all $EBOLD of your stores, what number of cases would have been
optimal, and what would your expected profit have been?

$BR
$BR
Optimal number of cases: \{ans_rule(10)\}
$BR
Resulting profit: $\{ ans_rule(10)\}


END_TEXT

# Check answers

#Optimal solution 
# Maximum profit
ANS(num_cmp($max_profit, tol => 0.05));

# Profit with last_store_s remaining
ANS(num_cmp($f_star_last[$last_store_s], tol =>0.05));

# Optimal values for just last store
ANS(num_cmp($last_opt_s));
ANS(num_cmp($last_opt_f, tol =>0.05));

# Optimal values for last two stores
ANS(num_cmp($sec_last_opt_s));
ANS(num_cmp($sec_last_opt_f, tol =>0.05));

# Best assignment/$ for solution given fixed available cases
ANS(num_cmp($x_opt[0]));
ANS(num_cmp($x_opt[1]));
ANS(num_cmp($x_opt[2]));
ANS(num_cmp($x_opt[3]));
ANS(num_cmp($x_opt[4]));
ANS(num_cmp($f_star_store_1[$available_cases], tol =>0.05));

# Optimal values for all stores
ANS(num_cmp($first_opt_s));
ANS(num_cmp($first_opt_f, tol =>0.05));



BEGIN_SOLUTION
$BR $BBOLD SOLUTION: $EBOLD
$BR

END_SOLUTION


ENDDOCUMENT();       # This should be the last executable line in the problem.
