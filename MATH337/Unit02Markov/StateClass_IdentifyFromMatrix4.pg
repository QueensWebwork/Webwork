## DESCRIPTION
##  Exponential Distribution
## ENDDESCRIPTION

## KEYWORDS('probability', 'continuous', 'exponential', 'distribution')
## naw tagged this problem.

## DBsubject('Probability')
## DBchapter('Distributions')
## DBsection('Exponential Distribution')
## Date('6/27/2005')
## Author('Jeff Holt')
## Institution('UVA')
## TitleText1('Statistics for Management and Economics')
## EditionText1('6')
## AuthorText1('Keller, Warrack')
## Section1()
## Problem1()


DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGmatrixmacros.pl",
"MathObjects.pl",
"parserRadioButtons.pl",
);

Context("Numeric");

%state_class = (
"1" => "Recurrent", 
"2" => "Recurrent", 
"3" => "Recurrent");

@states = qw(1 2 3);

$P = Matrix->new_from_array_ref([[0, 0, 1], [0.5, 0.5, 0], [0, 1, 0]]);

@r = ();
foreach $state (@states) {
  push (@r, RadioButtons( [ "Recurrent", "Transient"], $state_class{$state}));
}


$showPartialCorrectAnswers = 0;

BEGIN_TEXT 

A Markov chain is defined by the one-step transition matrix shown below.

\{ display_matrix($P)\}

$BR
Assume that the states are numbered from 1 to 3 along the rows and columns.



$PAR
For each state, indicate whether it is recurrent or transient.
$PAR
\{begintable(1) \} 
\{ row($states[0], $r[0]->buttons()) \}
\{ row($states[1], $r[1]->buttons()) \}
\{ row($states[2], $r[2]->buttons()) \}
\{endtable() \}

END_TEXT

ANS($r[0]->cmp());
ANS($r[1]->cmp());
ANS($r[2]->cmp());

BEGIN_SOLUTION

$BBOLD Solution:$EBOLD
$PAR
Drawing a diagram of the states, we have 
$BR
\{ image( "StateClassSolution4.png" ) \}
$BR
Click on the graph for a zoomed in view.
$PAR

Since all the states communicate, there is only one class of states,
which implies that all the states must be recurrent (if we start at
any state, we will eventually return, given infinite time).

END_SOLUTION




ENDDOCUMENT();       # This should be the last executable line in the problem.
