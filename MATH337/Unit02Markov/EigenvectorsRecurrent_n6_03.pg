
## DESCRIPTION
## Operations Research / Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('steady state', 'eigenvalues' 'eigenvectors')
## Tagged by aableson

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Queens')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
        "PGbasicmacros.pl",
        "PGchoicemacros.pl",
        "PGanswermacros.pl",
        "PGgraphmacros.pl",
        "PGmatrixmacros.pl",
	"parserPopUp.pl",
	"MathObjects.pl",
        );
 
TEXT(beginproblem());    
Context("Numeric");
Context()->flags->set(tolerance=>.01);
$showPartialCorrectAnswers = 1;


# 5-state system
# Only transfers from self t:o (self and +1 neighbour) 
# Randomly one row will have a 1 in the +1 neighbour slot

# Generated by Webwork/ProblemLibrary/MATH337Assignments/MATLAB/CreateRecurrentP_2.m
#[[0.0,0.0,0.0,0.0,0.0,1.0],[0.0,0.0,1.0,0.0,0.0,0.0],[0.0,0.6,0.2,0.2,0.0,0.0],[0.0,0.0,0.5,0.4,0.1,0.0],[0.0,0.0,0.0,0.3,0.4,0.3],[0.1,0.0,0.0,0.0,0.7,0.2]]
#Eigens of P
#1.00
#[[-0.408,-0.408,-0.408,-0.408,-0.408,-0.408]]
#0.83
#[[-0.694,0.073,0.060,-0.028,-0.420,-0.576]]
#0.35
#[[-0.889,-0.112,-0.040,0.306,0.058,-0.315]]
#0.10
#[[0.981,-0.018,-0.002,0.055,-0.154,0.099]]
#Eigens of P transpose
#1.00
#[[-0.005,-0.483,-0.806,-0.322,-0.107,-0.046]]
#0.83
#[[-0.040,0.438,0.606,-0.111,-0.563,-0.331]]
#0.35
#[[-0.035,-0.459,-0.271,0.835,0.053,-0.123]]
#0.10
#[[0.170,-0.327,-0.055,0.664,-0.625,0.172]]
#@long_term_probs = qw(0.00260 0.27320 0.45533 0.18213 0.06071 0.02602 );

$P = Matrix->new_from_array_ref([[0.0,0.0,0.0,0.0,0.0,1.0],[0.0,0.0,1.0,0.0,0.0,0.0],[0.0,0.6,0.2,0.2,0.0,0.0],[0.0,0.0,0.5,0.4,0.1,0.0],[0.0,0.0,0.0,0.3,0.4,0.3],[0.1,0.0,0.0,0.0,0.7,0.2]]);
$P_v1 = Matrix->new_from_array_ref( [[-0.408,-0.408,-0.408,-0.408,-0.408,-0.408]]);
$P_v2 = Matrix->new_from_array_ref( [[-0.694,0.073,0.060,-0.028,-0.420,-0.576]]);
$P_v3 = Matrix->new_from_array_ref([[-0.889,-0.112,-0.040,0.306,0.058,-0.315]]);
$P_v4 = Matrix->new_from_array_ref([[0.981,-0.018,-0.002,0.055,-0.154,0.099]]);
$Pt_v1 = Matrix->new_from_array_ref([[-0.005,-0.483,-0.806,-0.322,-0.107,-0.046]]);
$Pt_v2 = Matrix->new_from_array_ref( [[-0.040,0.438,0.606,-0.111,-0.563,-0.331]]);
$Pt_v3 = Matrix->new_from_array_ref([[-0.035,-0.459,-0.271,0.835,0.053,-0.123]]);
$Pt_v4 = Matrix->new_from_array_ref([[0.170,-0.327,-0.055,0.664,-0.625,0.172]]);
$e_1 = sprintf('%.2f', 1.00);
$e_2 = sprintf('%.2f', 0.83);
$e_3 = sprintf('%.2f', 0.35);
$e_4 = sprintf('%.2f', 0.10);
@long_term_probs = qw(0.00260 0.27320 0.45533 0.18213 0.06071 0.02602 );

# Decide on the starting and ending states; both can be random, and they _can_ be the same.
$N = 6;
$start_state = random(1, $N);
$end_state = random(1, $N);
$long_term_p = $long_term_probs[$end_state - 1];
$long_term_p = Compute("$long_term_p");

# Build the system type
$mc1 = new_multiple_choice();
$mc1->qa("", "Yes");
$mc1->makeLast("Yes", "No");

# Build the location of probability
$mc2 = new_multiple_choice();
$mc2->qa("", "Every entry in column $end_state.");
$mc2->makeLast("Every entry in the matrix.", 
"Every entry in row $start_state.",
"Every entry in column $end_state.",
"The entry in row $start_state, column $end_state.");
# Note the use of mbox below, to get 'P = matrix...' all in one equation.

BEGIN_TEXT 

Consider the Markov chain implied by the one-step transition matrix P below.
$BR
\{mbox( '\(P = \)', display_matrix($P))  \}  
$BR
  Here are the normalized positive eigenvectors of \(P\), written as row vectors, and with their corresponding eigenvalues (\(\lambda\)):
  \{  mbox(  '\(\lambda = $e_1\)' , display_matrix($P_v1)) \}
  \{  mbox(  '\(\lambda = $e_2\)' , display_matrix($P_v2)) \}
  \{  mbox(  '\(\lambda = $e_3\)' , display_matrix($P_v3)) \}
  \{  mbox(  '\(\lambda = $e_4\)' , display_matrix($P_v4)) \}
$BR
  Similarly, here are the normalized positive eigenvalues and corresponding vectors of \(P\) $BBOLD transpose$EBOLD. 

  \{  mbox(  '\(\lambda = $e_1\)' , display_matrix($Pt_v1)) \}
  \{  mbox(  '\(\lambda = $e_2\)' , display_matrix($Pt_v2)) \}
  \{  mbox(  '\(\lambda = $e_3\)' , display_matrix($Pt_v3)) \}
  \{  mbox(  '\(\lambda = $e_4\)' , display_matrix($Pt_v4)) \}

$PAR
A) Is this Markov chain $BBOLD irreducible $EBOLD (all states recurrent)? \{  $mc1->print_a() \}    
$PAR
B) If the states are numbered from 1 to \($N\), and you $BBOLD start in state \{$start_state\} $EBOLD, what is the probability in the long run that you will be in $BBOLD state \{$end_state\} $EBOLD? 
Give your answer rounded to 3 digits after the decimal.
$BR
Probability = \{ans_rule(15) \}
$BR
Note that this question is deliberately ambiguous; it describes either:
<ul>
<li>the probability of ending in an absorbing state if there is one, or 
<li>the long-term probability of being found in a recurrent state.  
</ul>Use whichever interpretation is appropriate given the model.

$PAR

 C) Consider the matrix defined by \( \lim_{n\to \infty} P^n\). Where
in this matrix would you $BBOLD also $EBOLD find the value you gave in part B)? 
Select the $BBOLD most general $EBOLD answer.
\{  $mc2->print_a() \}    


END_TEXT

ANS( radio_cmp( $mc1->correct_ans() ) );
ANS( $long_term_p->cmp() );
ANS( radio_cmp( $mc2->correct_ans() ) );
BEGIN_SOLUTION


END_SOLUTION


ENDDOCUMENT();       # This should be the last executable line in the problem.
