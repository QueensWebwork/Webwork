## DESCRIPTION
## Operations Research / Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('steady state', 'eigenvalues' 'eigenvectors')
## Tagged by aableson

## DBsubject('Linear Algebra')
## DBchapter('Matrices')
## DBsection('Eigenvalues')
## Date('')
## Author('')
## Institution('Queens')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

DOCUMENT();        # This should be the first executable line in the problem.
loadMacros(
        "PGbasicmacros.pl",
        "PGanswermacros.pl",
        "PGmatrixmacros.pl",
	"parserPopUp.pl",
	"parserMultiAnswer.pl",
	"MathObjects.pl",
	"unionLists.pl",
	"PGauxiliaryFunctions.pl",
        );

TEXT(beginproblem());    
Context("Numeric");
$showPartialCorrectAnswers = 1;

# Find the optimal maintenance schedule by optimizing expected
# maintenance costs.

@actions = qw(Nothing Maint Replace );
@C1 = (0, 500, 6000);
@C2 = (1000, 1500, 6000);
@C3 = (3000, 3500, 6000);
@C4 = (4000, 2500, 6000);
@P1A = (0.10, 0.80, 0.05, 0.05);
@P1B = (0.40, 0.60, 0.00, 0.00);
@P1C = (1.00, 0.00, 0.00, 0.00);
@P2A = (0.00, 0.80, 0.10, 0.10);
@P2B = (0.00, 0.90, 0.05, 0.05);
@P2C = (1.00, 0.00, 0.00, 0.00);
@P3A = (0.00, 0.00, 0.50, 0.50);
@P3B = (0.00, 0.00, 0.90, 0.10);
@P3C = (1.00, 0.00, 0.00, 0.00);
@P4A = (0.00, 0.00, 0.00, 1.00);
@P4B = (0.00, 0.00, 0.00, 1.00);
@P4C = (1.00, 0.00, 0.00, 0.00);
$P1 = Matrix->new_from_array_ref([[0.10, 0.80, 0.05, 0.05],
[0.40, 0.60, 0.00, 0.00],
[1.00, 0.00, 0.00, 0.00]]);
$P2 = Matrix->new_from_array_ref([[0.00, 0.80, 0.10, 0.10],
[0.00, 0.90, 0.05, 0.05],
[1.00, 0.00, 0.00, 0.00]]);
$P3 = Matrix->new_from_array_ref([[0.00, 0.00, 0.50, 0.50],
[0.00, 0.00, 0.90, 0.10],
[1.00, 0.00, 0.00, 0.00]]);
$P4 = Matrix->new_from_array_ref([[0.00, 0.00, 0.00, 1.00],
[0.00, 0.00, 0.00, 1.00],
[1.00, 0.00, 0.00, 0.00]]);

# Common strings 
@actions_full = ("do nothing", "do maintenance", "replace the machine");

# Random parameters
$A_state = random(1, 3); # ignore last possible state
$A_action_num = random(1, 3);
$A_action = $actions_full[$A_action_num-1];   
$A_next_state = max(1, $A_state + random(-1, 1));
$A_prob = 0;
if ($A_state == 1) { $A_prob = $P1->element($A_action_num, $A_next_state);   }
elsif ($A_state == 2) { $A_prob = $P2->element($A_action_num, $A_next_state);   }
elsif ($A_state == 3) { $A_prob = $P3->element($A_action_num, $A_next_state);   }

@D = (0) x 4;
$D[0] = random(1, 2);
$D[1] = random(1, 2);
$D[2] = random(1, 3);
$D[3] = 3;

# Consturct the P matrix
$P = (new Matrix(4, 4))->clone();
for ($c = 1; $c <= 4; $c++) {
  $P->assign(1, $c,$P1->element($D[0], $c));
  $P->assign(2, $c,$P2->element($D[1], $c));
  $P->assign(3, $c,$P3->element($D[2], $c));
  $P->assign(4, $c,$P4->element($D[3], $c));
}


# Tables
$PSol_1 = MultiAnswer( $P1->element($D[0], 1), $P1->element($D[0], 2), $P1->element($D[0], 3), $P1->element($D[0], 4))->with(
  singleResult => 1,
  checker => sub {
    my ($correct, $student, $self) = @_;
      my @correct = @{$correct};
      my @student = @{$student};
  my $i;
  for ($i = 0; $i <= 3; $i++) {
    if (!defined($student[$i]) || $student[$i] != Compute($correct[$i])) {
  return 0
  }
  }
  return 1;});

$PSol_2 = MultiAnswer( $P2->element($D[1], 1), $P2->element($D[1], 2), $P2->element($D[1], 3), $P2->element($D[1], 4))->with(
  singleResult => 1,
  checker => sub {
    my ($correct, $student, $self) = @_;
      my @correct = @{$correct};
      my @student = @{$student};
  my $i;
  for ($i = 0; $i <= 3; $i++) {
    if (!defined($student[$i]) || $student[$i] != Compute($correct[$i])) {
  return 0
  }
  }
  return 1;});
$PSol_3 = MultiAnswer( $P3->element($D[2], 1), $P3->element($D[2], 2), $P3->element($D[2], 3), $P3->element($D[2], 4))->with(
  singleResult => 1,
  checker => sub {
    my ($correct, $student, $self) = @_;
      my @correct = @{$correct};
      my @student = @{$student};
  my $i;
  for ($i = 0; $i <= 3; $i++) {
    if (!defined($student[$i]) || $student[$i] != Compute($correct[$i])) {
  return 0
  }
  }
  return 1;});
$PSol_4 = MultiAnswer( $P4->element($D[3], 1), $P4->element($D[3], 2), $P4->element($D[3], 3), $P4->element($D[3], 4))->with(
  singleResult => 1,
  checker => sub {
    my ($correct, $student, $self) = @_;
      my @correct = @{$correct};
      my @student = @{$student};
  my $i;
  for ($i = 0; $i <= 3; $i++) {
    if (!defined($student[$i]) || $student[$i] != Compute($correct[$i])) {
  return 0
  }
  }
  return 1;});

# Find steady-state distribution using eigenvectors
# We know that lambda=1 is an eigenvalue for P transtion prob. matrix
# We just need to find the corresponding eigenvector and normalize it
# so the sum is 1.
$max_state = 3;
$I = (new Matrix($max_state + 1, $max_state + 1))->clone();
for ($s = 0; $s <= $max_state; $s++) {
  $I->assign($s+1, $s+1, 1);
}
$Pt_minus_I = (~$P) - $I;
$LR = $Pt_minus_I->decompose_LR();
$L = $LR->L();
$R = $LR->R();
$PR = $LR->PR();
$PL = $LR->PL();
#$newA = $PL * $L * $R * $PR;  # check: should equal Pt - I

# Solve for eigenvalue:   L has det ne 0, but R has det = 0
# (PL L R PR) v  = [0] can be reduced by inverses to
#   R PR v = [0]
#   Let y = PR v, so 
#   R y = [0]
#   This can be solved by backsubstitution; 
#  Since P has one eigenvalue of 1, there is one zero in the
#  diagonal of R, in the last element in diag(R).
$y = (new Matrix($max_state + 1, 1))->clone();
$y->assign($max_state + 1, 1 , 1);
for ($s = $max_state-1; $s >= 0; $s--) {
  $r = $R->row($s+1); 
  # $y's last relevant entry is zero, so $r * $y gives the value of  
  $comb = $r * $y;  # matrix mult
  $comb = $comb->element(1,1);  # matrix mult
  $y->assign($s+1, 1, -1 * $comb/$R->element($s+1, $s+1));  # matrix mult
}
#  y = PR v, so (PR_inv y) = v.  
# NOTE: PR is orthogonal, so ~PR (transpose) = PR inverse 
$ss_prob = (~$PR) * $y;

# Verify eigenvector status: Should satisfy Pt v = v
#$eigv_check = ((~$P) * $v) - $v;

# Normalize the eigenvector: sum of probabilities = 1
$sum = 0; 
for ($s = 0; $s <= $max_state; $s++)  {
  $sum = $sum + $ss_prob->element($s+1, 1); 
}
for ($s = 0; $s <= $max_state; $s++)  {
  $ss_prob->assign($s+1, 1, $ss_prob->element($s+1, 1)/$sum); 
}

# Create an answer for the steady-state probability distribution
$SS_ans = MultiAnswer($ss_prob->element(1, 1),  
$ss_prob->element(2, 1),
$ss_prob->element(3, 1),
$ss_prob->element(4, 1))->with(
  singleResult => 1,
  checker => sub {
    my ($correct, $student, $self) = @_;
      my @correct = @{$correct};
      my @student = @{$student};
my $i;
for ($i = 0; $i < @student; $i++) {
  if (!defined($student[$i]) || abs($student[$i] - $correct[$i]) > 1e-3) {
return 0
}
}
return 1;});

# Compute the average cost of the steady-state solution
$avg_cost = 0;  
# D[i] is 1-indexed, but C# lookup needs to be zero-indexed (perl array)
$avg_cost += $C1[$D[0]-1] * $ss_prob->element(1,1);
$avg_cost += $C2[$D[1]-1] * $ss_prob->element(2,1);
$avg_cost += $C3[$D[2]-1] * $ss_prob->element(3,1);
$avg_cost += $C4[$D[3]-1] * $ss_prob->element(4,1);

BEGIN_TEXT

You are responsible for the planning the maintenance and replacement
of set of machines in a factory.  The machines can be classified  
either $BR
1 - $BITALIC Like new$EITALIC,$BR
2 - $BITALIC Slightly worn$EITALIC,$BR
3 - $BITALIC Severely worn$EITALIC, or$BR
4 - $BITALIC Inoperable$EITALIC.
$PAR
Regardless of the state, you have 3 choices for an action you can take
with the machine: $BR
$BITALIC A - Do nothing$EITALIC, $BR
$BITALIC B - Perform maintenance$EITALIC, or $BR
$BITALIC C - Replace the machine$EITALIC.

$PAR $BBOLD Costs$EBOLD 

$BR Here are the costs for one week of running the machine in each of
the various states, given the decision you choose to make.

\{begintable(4)\}
\{row("State\Action", @actions) \}
\{row("1", @C1) \}
\{row("2", @C2) \}
\{row("3", @C3) \}
\{row("4", @C4) \}
\{endtable()\}

Your decision also has an effect on the one-step state transition
probabilities.  Given the last state and your action, the  

\{begintable(6)\}
\{row("", "", "\(s_{t+1}\)") \}
\{row("\(s_t\)", "Action", 1..4) \}
\{row("1", $actions[0], @P1A) \}
\{row("", $actions[1], @P1B) \}
\{row("", $actions[2], @P1C) \}
\{row("2", $actions[0], @P2A) \}
\{row("", $actions[1], @P2B) \}
\{row("", $actions[2], @P2C) \}
\{row("3", $actions[0], @P3A) \}
\{row("", $actions[1], @P3B) \}
\{row("", $actions[2], @P3C) \}
\{row("4", $actions[0], @P4A) \}
\{row("", $actions[1], @P4B) \}
\{row("", $actions[2], @P4C) \}
\{endtable()\}

$PAR 


A) If the state of the machine is \{$A_state\} and you \{$A_action\},
what is the probability that the machine will be in state
\{$A_next_state\} one week later?

$BR
\(P(s_{t+1} = $A_next_state | s_t = $A_state, a_t = \mbox{ $A_action}) \) = 
\{ans_rule(10)\}


$PAR 
B) Assume that your $BBOLD policy$EBOLD is to select the following
actions based on the current state:

\{begintable(2)\}
\{row("State", "Chosen Action") \}
\{row("1", $actions_full[$D[0]-1]) \}
\{row("2", $actions_full[$D[1]-1]) \}
\{row("3", $actions_full[$D[2]-1]) \}
\{row("4", $actions_full[$D[3]-1]) \}
\{endtable()\}

What is the one-step transition probability matrix \(P\) for the
system with this policy in place?

\{begintable(5)\}
\{row("\(s_t\)\ \(s_{t+1}\)", 1..4) \}
\{row(1, $PSol_1->ans_rule(4), $PSol_1->ans_rule(4), $PSol_1->ans_rule(4), $PSol_1->ans_rule(4)) \}
\{row(2, $PSol_2->ans_rule(4), $PSol_2->ans_rule(4), $PSol_2->ans_rule(4), $PSol_2->ans_rule(4)) \}
\{row(3, $PSol_3->ans_rule(4), $PSol_3->ans_rule(4), $PSol_3->ans_rule(4), $PSol_3->ans_rule(4)) \}
\{row(4, $PSol_4->ans_rule(4), $PSol_4->ans_rule(4), $PSol_4->ans_rule(4), $PSol_4->ans_rule(4)) \}
\{endtable()\}

$PAR

C) Given the policy above, what is the steady-state probability distribution
over the machine states?

\{begintable(5)\}
\{row("\(s\)", 1..4) \}
\{row("\(\pi_s\)", $SS_ans->ans_rule(6),$SS_ans->ans_rule(6),$SS_ans->ans_rule(6),$SS_ans->ans_rule(6) ) \}
\{endtable()\}

$PAR

D) Find the average expected cost per week of this maintenance policy over the long run.

$BR
Expected average cost per week:  $\{ans_rule(8)\}


END_TEXT

# Check answers

ANS(num_cmp($A_prob));

ANS( $PSol_1->cmp() );
ANS( $PSol_2->cmp() );
ANS( $PSol_3->cmp() );
ANS( $PSol_4->cmp() );

ANS( $SS_ans->cmp() );

ANS(num_cmp($avg_cost, tol => 1));

BEGIN_SOLUTION
$BR $BBOLD SOLUTION:$EBOLD
$BR

A) This probability can be found in the \(s_t, \mbox{ Action } \) table.

$PAR

B) The complete \(P\) matrix can be constructed using the
appropriate rows out of the \([s_t, \mbox{ Action }] \) table.

END_SOLUTION


ENDDOCUMENT();       # This should be the last executable line in the problem.
